version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: atomix-postgres
    environment:
      POSTGRES_DB: atomix_cafeteria
      POSTGRES_USER: atomix_user
      POSTGRES_PASSWORD: atomix_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - atomix-network
    restart: unless-stopped

  # MongoDB Database
  mongodb:
    image: mongo:6-jammy
    container_name: atomix-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: atomix_cafeteria_nosql
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - atomix-network
    restart: unless-stopped

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: atomix-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - atomix-network
    restart: unless-stopped

  # Backend Service
  backend:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: atomix-backend
    environment:
      SPRING_PROFILES_ACTIVE: dev
      DB_USERNAME: atomix_user
      DB_PASSWORD: atomix_password
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/atomix_cafeteria
      SPRING_DATA_MONGODB_URI: mongodb://admin:admin123@mongodb:27017/atomix_cafeteria_nosql?authSource=admin
      SPRING_DATA_REDIS_HOST: redis
      JWT_SECRET: myVerySecretJWTKey123456789
      ALLOWED_ORIGINS: http://localhost:3000
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - mongodb
      - redis
    networks:
      - atomix-network
    restart: unless-stopped
    volumes:
      - ../backend/logs:/app/logs
      - ../backend/uploads:/app/uploads

  # Frontend Service
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/Dockerfile.frontend
    container_name: atomix-frontend
    environment:
      REACT_APP_API_URL: http://localhost:8080/api/v1
      REACT_APP_WS_URL: ws://localhost:8080/ws
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - atomix-network
    restart: unless-stopped
    volumes:
      - ../frontend/src:/app/src
      - ../frontend/public:/app/public

  # Nginx Reverse Proxy (Optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: atomix-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - atomix-network
    restart: unless-stopped

  # Database Administration Tools
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: atomix-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@atomix.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - atomix-network
    restart: unless-stopped

  mongo-express:
    image: mongo-express:latest
    container_name: atomix-mongo-express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
      ME_CONFIG_MONGODB_URL: mongodb://admin:admin123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    networks:
      - atomix-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  atomix-network:
    driver: bridge
    name: atomix-network 